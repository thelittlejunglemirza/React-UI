/**
 * @api {get} /api/tos Get collection
 * @apiName Tos_api_GET
 * @apiGroup Tos
 * @apiVersion 1.0.0
 * @apiDescription This endpoint returns the entire Tos Collection as seen in the database. This endpoint will only
 *                 return a MAXIMUM of 20 objects at a time, with an offset defined by the user
 *                 (via the header key 'start'). If the offset is larger then the number of objects in the collection
 *                 the endpoint will return 400, the number of objects in this collection can be checked using the options
 *                  endpoint. If start is equal to -1 then the endpoint will return the last 20 objects in reversed order.
 *                  By providing the match key, this endpoint will filter through the database for urls matching the keys
 *                  value. Note that one of start/match must exist.
 *
 * @apiParam (Headers) {Int} start The number of objects to offset query by.
 * @apiParam (Headers) {String} match The desired search query to match url.
 *
 * @apiSuccess {ObjectId} _id Unique id generated by MongoDb.
 * @apiSuccess {String} date_reviewed  Timestamp of when the entry was created in database.
 * @apiSuccess {String} url  Url to the Terms Of Service location.
 * @apiSuccess {Array} statements  Contains each statement and its revisions as an object.
 * @apiSuccess {String} text  Text of the statement.
 * @apiSuccess {String} tag  Tags of the statement, assigned by an analyst.
 * @apiSuccess {String} comment  Comment of a statement, assigned by an analyst.
 * @apiSuccess {String} risk_assessment  Risk assessment for this version of the Tos, generated by an analyst.
 * @apiSuccess {String} dom  Text/HTML dom of the Tos.
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *     [
 *          {
 *              "_id":"5b1ef5e21c74671a303ff4dd",
 *              "date_reviewed":"2018-04-05",
 *              "url":"https://help.instagram.com/478745558852511",
 *              "statements":[
 *                   {
 *                       "text":"text0",
 *                       "tag":["money","tags"],
 *                       "comment":"needs revision"
 *                  },
 *                  {
 *                      "text":"text1",
 *                      "tag":["money","tags"],
 *                      "comment":""
 *                  },
 *              ],
 *              "risk_assessment":"lroao qentaro",
 *              "dom":"Dom 2"
 *          },
 *     ]
 *
 * @apiErrorExample {json} ERROR: Key out of range
 *     HTTP/1.1 400 Bad Request
 *     {
 *      "code": 400,
 *      "message": "'start' must be less than the number of objects in the collection (3)"
 *     }
 * @apiErrorExample {json} ERROR: Key DNE or not an integer
 *     HTTP/1.1 400 Bad Request
 *     {
 *      "code": 400,
 *      "message": "request must have the header 'start' with a valid integer value."
 *     }
 *
 */

  /**
 * @api {options} /api/tos Options
 * @apiName Tos_api_Options
 * @apiGroup Tos
 * @apiVersion 1.0.0
 * @apiDescription This request will add return the allowed methods, and number of objects in the collection for this
 *                 endpoint.
 *
 * @apiSuccess {Array} allowed_methods Methods allowed for this endpoint.
 * @apiSuccess {Int} number_of_objects  Number of objects in the Tos collection.
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *         "allowed_methods": ["GET", "POST"],
 *         "number_of_objects": 4
 *     }
 */

 /**
 * @api {post} /api/tos Add an entry
 * @apiName Tos_api_POST
 * @apiGroup Tos
 * @apiVersion 1.0.0
 * @apiDescription This request will add an object to the Tos collection based on the json body posted. Before an entry
 *                 is made, the server will check that url, statements, risk_assessment, and dom keys are present and
 *                 valid. For all entries with url's not already in db a new object is added to the TosVersions collection,
 *                 mapping this version of the Tos to the parent (all versions). For all entries with url's in the db, an
 *                 id mapping TosVersion to this version is appended. Currently this endpoint will only except one
 *                 object at a time, but in the future you will be able to send a list of objects.
 *
 * @apiParam  {String} url Url to the Terms Of Service location (same between all versions of a Tos).
 * @apiParam  {Array} statements Contains each statement and its revisions as an object (text, tag, comment).
 * @apiParam  {String} text Text of the statement.
 * @apiParam  {String} tag  Tags of the statement, assigned by an analyst.
 * @apiParam  {String} comment  Comment of a statement, assigned by an analyst.
 * @apiParam  {String} risk_assessment  Risk assessment for this version of the Tos, generated by an analyst.
 * @apiParam  {String} dom  Text/HTML dom of the Tos.
 *
 * @apiParamExample {json} Request-Example:
 *     {
 *         "url":"https://help.instagram.com/478745558852511",
 *         "statements":[
 *             {
 *                 "text":"text0",
 *                 "tag":["money","tags"],
 *                 "comment":"needs revision"
 *             },
 *             {
 *                 "text":"text1",
 *                 "tag":["money","tags"],
 *                 "comment":""
 *             }
 *          ],
 *          "risk_assessment":"lroao qentaro",
 *          "dom":"Dom 2"
 *     }
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 * @apiErrorExample Error-Response
 *     HTTP/1.1 400 Bad Request
 */

 /**
 * @api {get} /api/tos/:id Get a specific object
 * @apiName Tos_object_api_GET
 * @apiGroup Tos
 * @apiVersion 1.0.0
 * @apiDescription This endpoint returns the data for one version of a Tos as an object.
 *
 * @apiParam  {String} :id  ObjectId of the desired Tos Collection entry
 *
 * @apiSuccess {String} _id Unique id generated by MongoDb.
 * @apiSuccess {String} date_reviewed  Timestamp of when the entry was created in database.
 * @apiSuccess {String} url  Url to the Terms Of Service location.
 * @apiSuccess {Array} statements  Contains each statement and its revisions as an object.
 * @apiSuccess {String} text  Text of the statement.
 * @apiSuccess {String} tag  Tags of the statement, assigned by an analyst.
 * @apiSuccess {String} comment  Comment of a statement, assigned by an analyst.
 * @apiSuccess {String} risk_assessment  Risk assessment for this version of the Tos, generated by an analyst.
 * @apiSuccess {String} dom  Text/HTML dom of the Tos.
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *         "_id":"5b1ef5e21c74671a303ff4dd",
 *         "date_reviewed":"2018-04-05",
 *         "url":"https://help.instagram.com/478745558852511",
 *         "statements":[
 *             {
 *                 "text":"text0",
 *                 "tag":["money","tags"],
 *                 "comment":"needs revision"
 *             },
 *             {
 *                 "text":"text1",
 *                 "tag":["money","tags"],
 *                 "comment":""
 *             }
 *          ],
 *          "risk_assessment":"lroao qentaro",
 *          "dom":"Dom 2"
 *     }
 *
 *
 */

 /**
 * @api {delete} /api/tos/:id Delete an entry
 * @apiName Tos_object_api_DELETE
 * @apiGroup Tos
 * @apiVersion 1.0.0
 * @apiDescription With this request you can delete a Tos collection object with a given id. Once sent this version of the
 *                 Tos, and all instances in TosVersions collection will be permanently deleted. Use this endpoint with
 *                 care, use GET /api/tos/:id to verify that the id to delete is correct.
 *
 * @apiParam  {String} :id  ObjectId of the desired Tos Collection entry.
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200
 * @apiErrorExample Error-Response
 *     HTTP/1.1 400 Bad Request
 */

 /**
 * @api {patch} /api/tos/:id Add a statement
 * @apiName Tos_object_api_PATCH
 * @apiGroup Tos
 * @apiVersion 1.0.0
 * @apiDescription This request will append the desired object to the statement array in Tos Collection.
 *                 Ensure that the patched object is properly formatted as seen below, no checks are made to the value key
 *                 so data will appended as is.
 *
 * @apiParam  {String} :id  ObjectId of the desired Tos Collection entry.
 * @apiParam  {String} key  Targeted key to be changed.
 * @apiParam  {Object} value  New value of the targeted key, be sure to properly format the statement value (include text, tag, and comments as seen below).
 *
 * @apiParamExample {json} Request-Example:
 * 	{
 *	    "key":"statements",
 *  	"value": {
 *	                  "text":"text0",
 *	                  "tag":["money","tags"],
 *	                  "comment":"needs revision"
 *	             }
 *	}
 *
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200
 * @apiErrorExample Error-Response
 *     HTTP/1.1 400 Bad Request
 */

 /**
 * @api {put} /api/tos/:id Replace statement array
 * @apiName Tos_object_api_PUT
 * @apiGroup Tos
 * @apiVersion 1.0.0
 * @apiDescription This endpoint will replace the statements key (Tos collection) with given object. It is useful when
 *                 you want to delete a statement, simply get the statements, copy object ignoring the unwanted values, then
 *                 use this endpoint to replace the db version with your local copy. This endpoint can also replace any
 *                 desired key with a desired value.
 *
 * @apiParam  {String} :id  ObjectId of the desired Tos Collection entry.
 * @apiParam  {String} key  Targeted key to be changed.
 * @apiParam  {Array} value  New value of the targeted key, be sure to properly format the statement (include text, tag, and comments as seen below).
 *
 * @apiParamExample {json} Request-Example:
 * 	{
 *	    "key":"statements",
 *  	"value": [{
 *	                  "text":"text0",
 *	                  "tag":["money","tags"],
 *	                  "comment":"needs revision"
 *	             }]
 *	}
 *
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200
 * @apiErrorExample Error-Response
 *     HTTP/1.1 400 Bad Request
 */