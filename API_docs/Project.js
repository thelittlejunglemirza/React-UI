/**
 * @api {get} /api/project Options
 * @apiName Project_api_OPTIONS
 * @apiGroup Project
 * @apiVersion 1.0.0
   * @apiDescription This request will add return the allowed methods, and number of objects in the collection for this
 *                 endpoint
 *
 * @apiSuccess {Array} allowed_methods Methods allowed for this endpoint.
 * @apiSuccess {Int} number_of_objects  Number of objects in the Tos collection.
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *         "allowed_methods": ["GET"],
 *         "number_of_objects": 4
 *     }
 */

/**
 * @api {get} /api/project Get Collection
 * @apiName Project_api_GET
 * @apiGroup Project
 * @apiVersion 1.0.0
 * @apiDescription This endpoint returns the entire Project Collection as seen in the database. This endpoint will only
 *                 return a MAXIMUM of 20 objects at a time, with an offset defined by the user
 *                 (via the header key 'start'). If the offset is larger then the number of objects in the collection
 *                 the endpoint will return 400, the number of objects in this collection can be checked using the options
 *                  endpoint. If start is equal to -1 then the endpoint will return the last 20 objects in reversed order.
 *                  By providing the match key, this endpoint will filter through the database for project_name matching the keys
 *                  value. Note that one of start/match must exist.
 *
 * @apiParam (Headers) {Int} start The number of objects to offset query by.
 * @apiParam (Headers) {String} match The desired search query to match project_name.
 *
 * @apiSuccess {String} _id Unique id generated by MongoDb.
 * @apiSuccess {String} date_created  Date entry was created in db.
 * @apiSuccess {String} project_name  Unique name of project defined by project admin.
 * @apiSuccess {String} review_status  Status of reviewing process(not reviewed, in progress, reviewed).
 * @apiSuccess {String} api_list  Array of object ID's linking this Project to it's subsequent API's.
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *     [
 *          {
 *              "_id":"5b2820141c74672ec034627b",
 *              "date_created":"2018-06-18",
 *              "project_name":"Priority Marker",
 *              "review_status": "reviewed"
 *              "api_list":[
 *                  "5b27f51b1c7467155ca60330"
 *                  ]
 *          },
 *     ]
 *
 * @apiErrorExample {json} ERROR: Key out of range
 *     HTTP/1.1 400 Bad Request
 *     {
 *      "code": 400,
 *      "message": "'start' must be less than the number of objects in the collection (3)"
 *     }
 * @apiErrorExample {json} ERROR: Key DNE or not an integer
 *     HTTP/1.1 400 Bad Request
 *     {
 *      "code": 400,
 *      "message": "request must have the header 'start' with a valid integer value."
 *     }
 *
 */

  /**
 * @api {post} /api/project Add an entry
 * @apiName Project_api_POST
 * @apiGroup Project
 * @apiVersion 1.0.0
 * @apiDescription This request will add an object to the Project collection based on the json body posted. Before an entry
 *                 is made, the server will check that each parameter is present and valid. Request not work if project_name already exists.
 *                 Currently this endpoint will only except one object at a time.
 *
 * @apiParam {String} project_name  Unique given name of api.
 * @apiParam {String} tos_list  Array of object ID's linking this Project to it's subsequent API's.
 *
 * @apiParamExample {json} Request-Example:
 *   {
 *       "project_name": "apache tomcat",
 *       "api_list": [
 *           "5b27f51b1c7467155ca60330"
 *       ]
 *   }
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 * @apiErrorExample Error-Response
 *     HTTP/1.1 400 Bad Request
 *     {
 *      "code": 400,
 *      "message":  "Project already exists"
 *     }
 */
